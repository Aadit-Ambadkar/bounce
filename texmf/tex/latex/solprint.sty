\ProvidesPackage{solprint}

% we write to a file called \jobname.sol

\newwrite\@solout

% boolean for whether the file is the source file or a separate solutions document

\newif\ifsource\sourcetrue

% counter for prob files
\newcounter{probfile}
\setcounter{probfile}{0}

% counter for sol files
\newcounter{solfile}
\setcounter{solfile}{0}

% - Options
%   Used to change the default environment name in case of conflicts

\RequirePackage{kvoptions}

\DeclareStringOption[solu]{envname}
\DeclareBoolOption[false]{showsol}

\ProcessKeyvalOptions*

\RequirePackage{fancyvrb} % provides the VerbatimOut environment
\RequirePackage{fvextra} % patches fancyverb

% Makes an environment part of solprint
% Any environment that goes under this command
% will be redefined to print out its contents
% verbatim to a \jobname.prob file.

\RequirePackage{environ}
% Used to temporarily redefine solu to swallow the body
% when the file we are compiling from
% is not the source.

\RequirePackage{xpatch} % Necessary in order to
% patch the environments correctly
% so that they still take in the correct number [and type] of arguments.

% Solify - makes an environment work with solprint
%
%   Usage: \solify[optional prefix]{envvar}{envname}{numref}
%   The default prefix is Solution to
%
%   #1 is prefix (optional)
%   #2 is environment variable (say exer)
%   #3 is name of environment (say Exercise)
%   #4 is number to reference (usually should contain some sort of counter)
%   Note that the package assumes that the first argument of the environment
%   is the source.
%
%   titledefined checks whether title is defined
%   0 means undefined, 1 means defined
%   Used to throw errors

\def\titledefined{0}

% This is more robust and allows you to print problem statements in an external file,
% at the cost of being less flexible.
% In particular, you cannot solify most tcolorbox or mdframed environments,
% and you NEVER can solify an environment with one optional argument and no mandatory arguments.

\newcommand\solify[4][Solution to]{
    % we define these because we are going to change the catcode of # later on
    
    \def\env@prefix{#1}
    \def\env@var{#2}
    \def\env@name{#3}
    \def\env@num{#4}

    \expandafter\xapptocmd\csname \env@var\endcsname{% We insert comments
        \stepcounter{probfile}% after each line,
        \gdef\titledefined{1}% so as to not
        \xdef\solprint@envprefix{\env@prefix}% run into spacing issues.
        \xdef\solprint@envproblem{\env@name{} \env@num}%
        \xdef\solprint@envassoc{\theprobfile}%
    }{}{}

    \solifyhack

    \expandafter\xpretocmd\csname end\env@var\endcsname{%
        \endVerbatimOut% The opening VerbatimOut is in solifyhack
        \input{\jobname-\theprobfile.prob}%
        \gdef\titledefined{0}%
    }{}{}
}

% We change the catcode so that #1 isn't interpreted
% as an argument of \solifyhack.
\catcode`\#=12 
\newcommand\solifyhack{
    % We put this hack here because xpatch cannot deal with nested macros
    % if the outer macro has arguments.
    \expandafter\xapptocmd\csname \env@var\endcsname{%
        \xdef\solprint@envsource{#1}%
        \VerbatimOut{\jobname-\theprobfile.prob}%
    }{}{}
}
\catcode`\#=6

% This is less robust but can be used on a number of different environments.
% The cost is we cannot print the problem statement anywhere else.

\newcommand\safesolify[4][Solution to]{
    \def\env@prefix{#1}
    \def\env@var{#2}
    \def\env@name{#3}
    \def\env@num{#4}

    \expandafter\xapptocmd\csname \env@var\endcsname{% We insert comments
        \gdef\titledefined{1}% so as to not
        \xdef\solprint@envprefix{\env@prefix}% run into spacing issues.
        \xdef\solprint@envproblem{\env@name{} \env@num}%
    }{}{}

    \safesolifyhack

    \expandafter\xpretocmd\csname end\env@var\endcsname{%
        \gdef\titledefined{0}%
    }{}{}
}

\catcode`\#=12 
\newcommand\safesolifyhack{
    % We put this hack here because xpatch cannot deal with nested macros
    % if the outer macro has arguments.
    \expandafter\xapptocmd\csname \env@var\endcsname{%
        \xdef\solprint@envsource{#1}%
    }{}{}
}
\catcode`\#=6

% define env based on envname passed in
\newenvironment{\solprint@envname}
{
    \ifnum\titledefined=0
        % Throw an error if \solprint@envtitle is undefined
        % This is done for user convenience
        \PackageError{solprint}{The environment ``\solprint@envname'' must be in an environment that handles solutions}{Developers should see \protect\solify in the package documentation.}
    \fi

    \stepcounter{solfile}
    \immediate\write\@solout{% we comment after each line to prevent extra spaces from being inserted
    % ^^J prints a linebreak
        \string\expandafter\string\xdef\noexpand\csname solprint@prefix\thesolfile\string\endcsname{\solprint@envprefix}^^J%
        \string\expandafter\string\xdef\noexpand\csname solprint@problem\thesolfile\string\endcsname{\solprint@envproblem}^^J%
        \ifdefined\solprint@envassoc
            \string\expandafter\string\xdef\noexpand\csname solprint@assoc\thesolfile\string\endcsname{\solprint@envassoc}^^J%
        \fi
        \string\expandafter\string\xdef\noexpand\csname solprint@source\thesolfile\string\endcsname{\solprint@envsource}
    }

    % creates refs for hyperlinks (used only if file is source)
    \label{solu:\thesolfile}

    \VerbatimOut{\jobname-\thesolfile.sol}% need % here because VerbatimOut behaves weirdly with spaces
}
{
    \endVerbatimOut
}

% Define titles for solprint

\newcommand{\solprint@title}{
    \ifsource
    \newpage
    \section{Solutions}
    \else
        \maketitle

        \ifdefined\toc % we expect people to use \toc
        \else
            \newcommand{\toc}{\newpage\tableofcontents\newpage}
        \fi

        \toc
    \fi
}

\newcommand{\solprint@sol}[1]{
    \def\temp@prefix{\csname solprint@prefix#1\endcsname}
    \def\temp@problem{\csname solprint@problem#1\endcsname}
    \edef\temp@source{\csname solprint@source#1\endcsname}
    \edef\sol@filename{\sol@prefix-#1.sol}% Comments are needed
    \IfFileExists{\sol@filename}{% To eliminate any spaces
    % That follow the ends of the lines
    \ifsource    
        \subsection{\temp@prefix{} \ifsource\hyperref[solu:\thesolfile]{\temp@problem}\else\temp@problem\fi{} \ifx\empty\temp@source\else(\temp@source)\fi}
        \input{\sol@filename}    
    \else
        \section{\temp@prefix{} \temp@problem{} (\temp@source)}
        \expandafter\ifdefined\csname solprint@assoc#1\endcsname
            \edef\prob@filename{\sol@prefix-\csname solprint@assoc#1\endcsname.prob}
            \begingroup
                \RenewEnviron{\solprint@envname}{}
                \input{\prob@filename}
            \endgroup
        \fi
        \subsection{Solution}
        \input{\sol@filename}
    \fi
    }{}
}

% Includes all sol files in order

\ifsolprint@showsol
\newcommand\solprint[1][\jobname]{

    % defines the file to look for solutions to be the optional argument

    % checks if file is source of the problems and solutions

    \ifnum\pdfstrcmp{#1}{\jobname}=0
    \else
        \sourcefalse
    \fi

    \immediate\write\@auxout{\string\gdef\string\sol@prefix{#1}}

    % We need this \ifnum here because TeX will treat a foreach from
    % 1 to 0 as including 1
    \ifdefined\sol@count
        \ifnum\sol@count>0
            \solprint@title % prints solution title
            \foreach \i in {1, ..., \sol@count} {
                \solprint@sol{\i}
            }
        \fi
    \fi
}
\else
\newcommand\solprint[1]{}
\fi

% inputs solout at beginning of document if it exists (requires running twice)

\AtBeginDocument{
    \ifdefined\sol@prefix
        \IfFileExists{\sol@prefix.sol}
        {
            % because we are hooking into the beginning of the document,
            % we are making @ a letter and making @ an other afterwards
            % This is because we are inputting \sol@prefix.sol,
            % which may (and usually does) contain commands with the @ character.
            \makeatletter

            \input{\sol@prefix.sol}
            
            % put openout here so tex can process the .sol file first
            
            \makeatother
        }
        {
            \PackageError{solprint}{Make sure the .sol file you passed into \protect\solprint exists.}
        }
    \fi
    \immediate\openout\@solout = \jobname.sol
}

% Writes to @solout at end of document

\AtEndDocument{
    \ifdefined\sol@prefix
    % We don't need to check for file existence because we already did in AtBeginDocument
        \makeatletter
            \input{\sol@prefix.sol}
        \makeatother
    \fi
    \ifsource
        \immediate\write\@solout{% we comment to prevent latex from inserting spaces after linebreaks
            \string\gdef\string\sol@count{\thesolfile} % and we use \string to tell latex to read the next control sequence literally
        }

    % closes @solout afterwards
    \closeout\@solout
    \fi
}